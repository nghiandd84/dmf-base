{"version":3,"file":"src_services_index_ts.js","mappings":"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","sources":["webpack://dmf_layout/./src/helper/http.helper.ts","webpack://dmf_layout/./src/services/crud.service.ts","webpack://dmf_layout/./src/services/index.ts","webpack://dmf_layout/./src/services/logger-service.ts"],"sourcesContent":["export class HttpHelper {\r\n    static objectToHttpParams(object: any): HttpParams {\r\n        let httpParams = new HttpParams({ encoder: new CustomHttpParameterCodex() });\r\n\r\n        Object.keys(object).forEach((key: string) => {\r\n            httpParams = httpParams.append(key, object[key]);\r\n        });\r\n\r\n        return httpParams;\r\n    }\r\n}\r\n\r\nexport class CustomHttpParameterCodex implements HttpParameterCodec {\r\n    decodeKey(key: string): string {\r\n        return decodeURIComponent(key);\r\n    }\r\n\r\n    decodeValue(value: string): string {\r\n        return decodeURIComponent(value);\r\n    }\r\n\r\n    encodeKey(key: string): string {\r\n        return encodeURIComponent(key);\r\n    }\r\n\r\n    encodeValue(value: string): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * A codec for encoding and decoding parameters in URLs.\r\n *\r\n * Used by `HttpParams`.\r\n *\r\n * @publicApi\r\n **/\r\nexport interface HttpParameterCodec {\r\n  encodeKey(key: string): string;\r\n  encodeValue(value: string): string;\r\n\r\n  decodeKey(key: string): string;\r\n  decodeValue(value: string): string;\r\n}\r\n\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\r\n  /**\r\n   * Encodes a key name for a URL parameter or query-string.\r\n   * @param key The key name.\r\n   * @returns The encoded key name.\r\n   */\r\n  encodeKey(key: string): string {\r\n    return standardEncoding(key);\r\n  }\r\n\r\n  /**\r\n   * Encodes the value of a URL parameter or query-string.\r\n   * @param value The value.\r\n   * @returns The encoded value.\r\n   */\r\n  encodeValue(value: string): string {\r\n    return standardEncoding(value);\r\n  }\r\n\r\n  /**\r\n   * Decodes an encoded URL parameter or query-string key.\r\n   * @param key The encoded key name.\r\n   * @returns The decoded key name.\r\n   */\r\n  decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  /**\r\n   * Decodes an encoded URL parameter or query-string value.\r\n   * @param value The encoded value.\r\n   * @returns The decoded value.\r\n   */\r\n  decodeValue(value: string) {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\n\r\nfunction paramParser(\r\n  rawParams: string,\r\n  codec: HttpParameterCodec\r\n): Map<string, string[]> {\r\n  const map = new Map<string, string[]>();\r\n  if (rawParams.length > 0) {\r\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n    // may start with the `?` char, so we strip it if it's present.\r\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\r\n    params.forEach((param: string) => {\r\n      const eqIdx = param.indexOf('=');\r\n      const [key, val]: string[] =\r\n        eqIdx == -1\r\n          ? [codec.decodeKey(param), '']\r\n          : [\r\n              codec.decodeKey(param.slice(0, eqIdx)),\r\n              codec.decodeValue(param.slice(eqIdx + 1)),\r\n            ];\r\n      const list = map.get(key) || [];\r\n      list.push(val);\r\n      map.set(key, list);\r\n    });\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\r\n */\r\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\r\nconst STANDARD_ENCODING_REPLACEMENTS: { [x: string]: string } = {\r\n  '40': '@',\r\n  '3A': ':',\r\n  '24': '$',\r\n  '2C': ',',\r\n  '3B': ';',\r\n  '3D': '=',\r\n  '3F': '?',\r\n  '2F': '/',\r\n};\r\n\r\nfunction standardEncoding(v: string): string {\r\n  return encodeURIComponent(v).replace(\r\n    STANDARD_ENCODING_REGEX,\r\n    (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s\r\n  );\r\n}\r\n\r\nfunction valueToString(value: string | number | boolean): string {\r\n  return `${value}`;\r\n}\r\n\r\ninterface Update {\r\n  param: string;\r\n  value?: string | number | boolean;\r\n  op: 'a' | 'd' | 's';\r\n}\r\n\r\n/**\r\n * Options used to construct an `HttpParams` instance.\r\n *\r\n * @publicApi\r\n */\r\nexport interface HttpParamsOptions {\r\n  /**\r\n   * String representation of the HTTP parameters in URL-query-string format.\r\n   * Mutually exclusive with `fromObject`.\r\n   */\r\n  fromString?: string;\r\n\r\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\r\n  fromObject?: {\r\n    [param: string]:\r\n      | string\r\n      | number\r\n      | boolean\r\n      | ReadonlyArray<string | number | boolean>;\r\n  };\r\n\r\n  /** Encoding codec used to parse and serialize the parameters. */\r\n  encoder?: HttpParameterCodec;\r\n}\r\n\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nexport class HttpParams {\r\n  private map: Map<string, string[]> | null;\r\n  private encoder: HttpParameterCodec;\r\n  private updates: Update[] | null = null;\r\n  private cloneFrom: HttpParams | null = null;\r\n\r\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\r\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n    if (!!options.fromString) {\r\n      if (!!options.fromObject) {\r\n        throw new Error(`Cannot specify both fromString and fromObject.`);\r\n      }\r\n      this.map = paramParser(options.fromString, this.encoder);\r\n    } else if (!!options.fromObject) {\r\n      this.map = new Map<string, string[]>();\r\n      Object.keys(options.fromObject).forEach((key) => {\r\n        const value = (options.fromObject as any)[key];\r\n        // convert the values to strings\r\n        const values = Array.isArray(value)\r\n          ? value.map(valueToString)\r\n          : [valueToString(value)];\r\n        this.map!.set(key, values);\r\n      });\r\n    } else {\r\n      this.map = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reports whether the body includes one or more values for a given parameter.\r\n   * @param param The parameter name.\r\n   * @returns True if the parameter has one or more values,\r\n   * false if it has no value or is not present.\r\n   */\r\n  has(param: string): boolean {\r\n    this.init();\r\n    return this.map!.has(param);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the first value for a parameter.\r\n   * @param param The parameter name.\r\n   * @returns The first value of the given parameter,\r\n   * or `null` if the parameter is not present.\r\n   */\r\n  get(param: string): string | null {\r\n    this.init();\r\n    const res = this.map!.get(param);\r\n    return !!res ? res[0] : null;\r\n  }\r\n\r\n  /**\r\n   * Retrieves all values for a  parameter.\r\n   * @param param The parameter name.\r\n   * @returns All values in a string array,\r\n   * or `null` if the parameter not present.\r\n   */\r\n  getAll(param: string): string[] | null {\r\n    this.init();\r\n    return this.map!.get(param) || null;\r\n  }\r\n\r\n  /**\r\n   * Retrieves all the parameters for this body.\r\n   * @returns The parameter names in a string array.\r\n   */\r\n  keys(): string[] {\r\n    this.init();\r\n    return Array.from(this.map!.keys());\r\n  }\r\n\r\n  /**\r\n   * Appends a new value to existing values for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value to add.\r\n   * @return A new body with the appended value.\r\n   */\r\n  append(param: string, value: string | number | boolean): HttpParams {\r\n    return this.clone({ param, value, op: 'a' });\r\n  }\r\n\r\n  /**\r\n   * Constructs a new body with appended values for the given parameter name.\r\n   * @param params parameters and values\r\n   * @return A new body with the new value.\r\n   */\r\n  appendAll(params: {\r\n    [param: string]:\r\n      | string\r\n      | number\r\n      | boolean\r\n      | ReadonlyArray<string | number | boolean>;\r\n  }): HttpParams {\r\n    const updates: Update[] = [];\r\n    Object.keys(params).forEach((param) => {\r\n      const value = params[param];\r\n      if (Array.isArray(value)) {\r\n        value.forEach((_value) => {\r\n          updates.push({ param, value: _value, op: 'a' });\r\n        });\r\n      } else {\r\n        updates.push({\r\n          param,\r\n          value: value as string | number | boolean,\r\n          op: 'a',\r\n        });\r\n      }\r\n    });\r\n    return this.clone(updates);\r\n  }\r\n\r\n  /**\r\n   * Replaces the value for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value.\r\n   * @return A new body with the new value.\r\n   */\r\n  set(param: string, value: string | number | boolean): HttpParams {\r\n    return this.clone({ param, value, op: 's' });\r\n  }\r\n\r\n  /**\r\n   * Removes a given value or all values from a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The value to remove, if provided.\r\n   * @return A new body with the given value removed, or with all values\r\n   * removed if no value is specified.\r\n   */\r\n  delete(param: string, value?: string | number | boolean): HttpParams {\r\n    return this.clone({ param, value, op: 'd' });\r\n  }\r\n\r\n  /**\r\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n   * separated by `&`s.\r\n   */\r\n  toString(): string {\r\n    this.init();\r\n    return (\r\n      this.keys()\r\n        .map((key) => {\r\n          const eKey = this.encoder.encodeKey(key);\r\n          // `a: ['1']` produces `'a=1'`\r\n          // `b: []` produces `''`\r\n          // `c: ['1', '2']` produces `'c=1&c=2'`\r\n          return this.map!.get(key)!\r\n            .map((value) => eKey + '=' + this.encoder.encodeValue(value))\r\n            .join('&');\r\n        })\r\n        // filter out empty values because `b: []` produces `''`\r\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n        .filter((param) => param !== '')\r\n        .join('&')\r\n    );\r\n  }\r\n\r\n  private clone(update: Update | Update[]): HttpParams {\r\n    const clone = new HttpParams({\r\n      encoder: this.encoder,\r\n    } as HttpParamsOptions);\r\n    clone.cloneFrom = this.cloneFrom || this;\r\n    clone.updates = (this.updates || []).concat(update);\r\n    return clone;\r\n  }\r\n\r\n  private init() {\r\n    if (this.map === null) {\r\n      this.map = new Map<string, string[]>();\r\n    }\r\n    if (this.cloneFrom !== null) {\r\n      this.cloneFrom.init();\r\n      this.cloneFrom\r\n        .keys()\r\n        .forEach((key) => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\r\n      this.updates!.forEach((update) => {\r\n        switch (update.op) {\r\n          case 'a':\r\n          case 's':\r\n            const base =\r\n              (update.op === 'a' ? this.map!.get(update.param) : undefined) ||\r\n              [];\r\n            base.push(valueToString(update.value!));\r\n            this.map!.set(update.param, base);\r\n            break;\r\n          case 'd':\r\n            if (update.value !== undefined) {\r\n              let base = this.map!.get(update.param) || [];\r\n              const idx = base.indexOf(valueToString(update.value));\r\n              if (idx !== -1) {\r\n                base.splice(idx, 1);\r\n              }\r\n              if (base.length > 0) {\r\n                this.map!.set(update.param, base);\r\n              } else {\r\n                this.map!.delete(update.param);\r\n              }\r\n            } else {\r\n              this.map!.delete(update.param);\r\n              break;\r\n            }\r\n        }\r\n      });\r\n      this.cloneFrom = this.updates = null;\r\n    }\r\n  }\r\n}\r\n","import { from, Observable } from 'rxjs';\r\nimport axios, { AxiosInstance } from 'axios';\r\nimport { map } from 'rxjs/operators';\r\nimport { omit } from 'lodash';\r\nimport { HttpHelper } from '../helper/http.helper';\r\n\r\nexport abstract class ApiBaseService {\r\n  protected httpClient: AxiosInstance;\r\n  basePath(): string {\r\n    if (!this.baseUrl || this.baseUrl.length === 0) {\r\n      return this.apiBasePath;\r\n    }\r\n    return `${this.apiBasePath}${this.baseUrl}`;\r\n  }\r\n  constructor(\r\n    protected baseUrl: string = null,\r\n    protected apiBasePath: string = ''\r\n  ) {\r\n    this.httpClient = axios.create({\r\n      baseURL: baseUrl,\r\n    });\r\n  }\r\n}\r\n\r\nexport class CrudBaseService<T extends { id: string }> extends ApiBaseService {\r\n  constructor(protected baseUrl: string, protected apiBasePath: string = '') {\r\n    super(baseUrl, apiBasePath);\r\n  }\r\n\r\n  get(id: string): Observable<T> {\r\n    return from(this.httpClient.get<T>(`${this.basePath()}/${id}`)).pipe(\r\n      map((res) => res && res.data)\r\n    );\r\n  }\r\n\r\n  filter(filterParams: any): Observable<T[]> {\r\n    return from(\r\n      this.httpClient.get<T[]>(this.basePath(), {\r\n        params: HttpHelper.objectToHttpParams({ ...filterParams }),\r\n      })\r\n    ).pipe(map((res) => res && res.data));\r\n  }\r\n\r\n  create(model: T): Observable<any> {\r\n    return from(\r\n      this.httpClient.post(this.basePath(), {\r\n        data: omit(model, ['id']),\r\n      })\r\n    );\r\n  }\r\n\r\n  update(id: string, model: T): Observable<any> {\r\n    return from(\r\n      this.httpClient.patch(`${this.basePath()}/${id}`, {\r\n        data: omit(model, ['id']),\r\n      })\r\n    );\r\n  }\r\n\r\n  delete(id: string): Observable<any> {\r\n    return from(this.httpClient.delete(`${this.basePath()}/${id}`));\r\n  }\r\n}\r\n","import * as logger from './logger-service';\r\n\r\nexport default {\r\n  logger,\r\n};\r\n\r\nexport * from './crud.service';\r\n","export default { log: console.log };"],"names":["HttpHelper","object","httpParams","HttpParams","encoder","CustomHttpParameterCodex","Object","keys","forEach","key","append","decodeURIComponent","value","encodeURIComponent","HttpUrlEncodingCodec","standardEncoding","paramParser","rawParams","codec","map","Map","length","params","replace","split","param","eqIdx","indexOf","decodeKey","slice","decodeValue","val","list","get","push","set","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","s","t","valueToString","options","fromString","fromObject","Error","values","Array","isArray","init","has","res","from","clone","op","updates","_value","eKey","encodeKey","encodeValue","join","filter","update","cloneFrom","concat","base","undefined","idx","splice","axios","omit","ApiBaseService","baseUrl","apiBasePath","httpClient","create","baseURL","CrudBaseService","id","basePath","pipe","data","filterParams","objectToHttpParams","model","post","patch","logger","log","console"],"sourceRoot":""}